import * as React from 'react';

import { Box, Button, Grid2, IconButton, Input, Typography } from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';

type PseudoGeneratorProps = {};

// Liste des caract√®res sp√©ciaux pour chaque lettre
const specialCharacters: Record<string, string[]> = {
  A: ["¬™", "ƒÄ", "ƒÅ", "ŒÜ", "Œ±", "√Ö", "√†", "√Å", "√Ç", "√Ñ"],
  a: ["¬™", "ƒÅ", "Œ¨", "Œ±", "√•", "√°", "√§"],
  B: ["Œí", "Œ≤", "‡∏ø"],
  b: ["—å", "—ä", "–¨"],
  C: ["¬¢", "¬©", "ƒÜ", "ƒç", "√á"],
  c: ["√ß", "ƒâ", "œÇ"],
  D: ["ƒé", "ƒè", "ƒê", "Œ¥"],
  d: ["ƒë", "ƒè"],
  E: ["ƒí", "ƒï", "ƒó", "ƒò", "Œà", "Œï", "Œû", "Œ£", "√™", "√©", "√à"],
  e: ["√™", "√©", "√®", "√´", "ƒô", "ƒï"],
  F: ["‚Ç£", "∆í"],
  f: ["∆í"],
  G: ["ƒú", "ƒù", "ƒû", "ƒü", "ƒ¢", "ƒ£"],
  g: ["ƒü", "ƒù", "ƒ£"],
  H: ["ƒ§", "ƒ•", "ƒ¶", "ƒß", "Œâ", "–ß", "—õ"],
  h: ["ƒ•", "ƒß"],
  I: ["¬°", "ƒ©", "ƒ´", "ƒ¨", "ƒØ", "ƒ∞", "Œä", "Œô", "ŒØ", "Œπ", "œä", "—ó"],
  i: ["ƒØ", "ƒ´", "ƒ©", "¬°", "√Ø"],
  J: ["ƒ¥", "ƒµ", "–à", "—ò"],
  j: ["ƒµ", "—ò"],
  K: ["ƒ∂", "ƒ∑", "Œö", "Œ∫", "–ö", "–∫"],
  k: ["ƒ∑", "Œ∫", "–∫"],
  L: ["¬£", "ƒπ", "ƒ∫", "ƒª", "ƒº", "≈Å", "≈Ç", "‚Ñì"],
  l: ["ƒº", "≈Ç", "ƒ∫"],
  M: ["–ú", "–º", "‡πì"],
  m: ["–º", "‡πì"],
  N: ["≈É", "≈Ñ", "≈Ö", "≈Ü", "≈á", "≈à", "–∏", "–ô"],
  n: ["≈Ñ", "≈Ü", "≈à", "–∏"],
  O: ["¬∫", "¬§", "≈å", "≈ç", "≈ê", "∆°", "Œò", "–§", "œÜ", "œÉ", "œå", "√ò"],
  o: ["¬∫", "≈ç", "≈ë", "√∏", "–æ"],
  P: ["œÅ", "–†", "—Ä"],
  p: ["œÅ", "—Ä"],
  Q: ["Œ¶", "Œ©", "–§"],
  q: ["œÜ", "œà"],
  R: ["≈î", "≈ñ", "≈ò", "–Ø", "–≥"],
  r: ["≈ï", "≈ô", "–≥"],
  S: ["¬ß", "≈ö", "≈ù", "≈û", "≈ü", "–Ö"],
  s: ["≈õ", "≈ù", "≈ü", "—ï"],
  T: ["≈¢", "≈§", "œÑ", "—Ç", "–¢"],
  t: ["≈£", "≈•", "œÑ"],
  U: ["≈≥", "≈®", "≈´", "≈Æ", "≈Ø", "∆Ø", "Œº"],
  u: ["≈©", "≈´", "≈≥", "≈Ø"],
  V: ["ŒΩ", "œã", "œÖ", "‚àö"],
  v: ["ŒΩ", "œÖ"],
  W: ["≈¥", "≈µ", "œâ", "œé", "–®", "–©"],
  w: ["≈µ", "œâ", "œé"],
  X: ["œá", "–ñ", "–∂"],
  x: ["œá", "–∂"],
  Y: ["¬•", "Œ≥", "≈∂", "Œé", "Œ®", "–é", "√ø"],
  y: ["≈∑", "√ø", "Œ≥"],
  Z: ["≈π", "≈ª", "≈º", "Œñ", "≈æ"],
  z: ["≈∫", "≈º", "≈æ"],
};

// Fonction pour obtenir un caract√®re sp√©cial al√©atoire (sensible √† la casse)
const getRandomSpecialCharacter = (char: string): string => {
  const specials = specialCharacters[char] || [char];
  return specials[Math.floor(Math.random() * specials.length)];
};

const PseudoGenerator: React.FunctionComponent<PseudoGeneratorProps> = () => {
    const [input, setInput] = React.useState<string>('');
    const [output, setOutput] = React.useState<string>('');
    const [history, setHistory] = React.useState<string[]>([]);
    const [customPseudo, setCustomPseudo] = React.useState<string>('');

  // G√©n√©rer un pseudo sp√©cial
  const generatePseudo = (value: string) => {
    const specialPseudo = value
      .split('')
      .map((char) => getRandomSpecialCharacter(char))
      .join('');
    setOutput(specialPseudo);

    // Mettre √† jour l'historique
    setHistory((prev) => {
      const updatedHistory = [specialPseudo, ...prev];
      return updatedHistory.slice(0, 10); // Conserver seulement les 10 derniers
    });
  };

  // Ajouter un caract√®re au pseudo personnalis√©
  const addCharacterToCustomPseudo = (char: string) => {
    setCustomPseudo((prev) => prev + char);
  };

  // Copier dans le presse-papiers
  const copyToClipboard = () => {
    navigator.clipboard.writeText(output);
    alert('Pseudo copi√© dans le presse-papiers !');
  };

  return (
    <Box style={{ fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '400px' }}>
      <Typography variant='h2'>üî† G√©n√©rateur de Pseudo Sp√©cial</Typography>
      <Box
        style={{
          display: 'flex',
          alignItems: 'center',
          marginBottom: '10px',
          position: 'relative',
        }}
      >
        <Input
          type="text"
          placeholder="Tape ton pseudo ici"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          style={{
            flex: 1,
            padding: '8px',
            fontSize: '1rem',
            borderRadius: '4px',
            border: '1px solid #ccc',
          }}
        />
        <IconButton
          onClick={() => generatePseudo(input)}
          style={{ position: 'absolute', right: '-40px', top: '4px' }}
        >
          <RefreshIcon />
        </IconButton>
      </Box>
      <Box
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          backgroundColor: '#f9f9f9',
          padding: '10px',
          borderRadius: '4px',
          border: '1px solid #ddd',
        }}
      >
        <Typography component="span" style={{ fontSize: '1.2rem', wordBreak: 'break-word' }}>
          {output || 'R√©sultat ici'}
        </Typography>
        <Button
          onClick={copyToClipboard}
          style={{
            marginLeft: '10px',
            padding: '6px 10px',
            cursor: 'pointer',
            border: 'none',
            backgroundColor: '#007bff',
            color: 'white',
            borderRadius: '4px',
          }}
        >
          üìã Copier
        </Button>
      </Box>
      {history.length > 0 && (
        <Box style={{ marginTop: '20px' }}>
          <Typography variant="h6">Historique des Pseudos :</Typography>
          <Box style={{ marginTop: '10px', display: 'flex', flexDirection: 'column', gap: '5px' }}>
            {history.map((item, index) => (
              <Button
                key={index}
                onClick={() => setOutput(item)}
                style={{
                  textAlign: 'left',
                  backgroundColor: '#f0f0f0',
                  padding: '8px',
                  borderRadius: '4px',
                  border: '1px solid #ddd',
                }}
              >
                {item}
              </Button>
            ))}
          </Box>
        </Box>
      )}

      <Box>
        <Typography variant="h5">Pseudo G√©n√©r√© :</Typography>
        <Typography style={{ fontSize: '1.5rem', marginBottom: '20px' }}>
          {output || 'R√©sultat ici'}
        </Typography>
        <Typography variant="h5">Pseudo Personnalis√© :</Typography>
        <Typography style={{ fontSize: '1.5rem', marginBottom: '20px' }}>
          {customPseudo || 'Ajoute des caract√®res ci-dessous'}
        </Typography>
      </Box>
      <Box>
        <Typography variant="h6">Liste des caract√®res sp√©ciaux :</Typography>
        <Grid2 container spacing={2} style={{ marginTop: '10px' }}>
          {Object.entries(specialCharacters).map(([letter, specials]) => (
            <Grid2 xs={12} sm={6} md={4} key={letter}>
                <>
                    <Typography style={{ fontWeight: 'bold' }}>{letter} :</Typography>
                    <Box
                        style={{
                        display: 'flex',
                        flexWrap: 'wrap',
                        gap: '5px',
                        marginTop: '5px',
                        }}
                    >
                        {specials.map((specialChar, index) => (
                        <Button
                            key={index}
                            onClick={() => addCharacterToCustomPseudo(specialChar)}
                            variant="outlined"
                            style={{
                            padding: '5px',
                            minWidth: '30px',
                            textAlign: 'center',
                            }}
                        >
                            {specialChar}
                        </Button>
                        ))}
                    </Box>
                </>
            </Grid2>
          ))}
        </Grid2>
      </Box>
    </Box>
  );
};

export default PseudoGenerator;
